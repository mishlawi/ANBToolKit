"""
These functions aren't currently being used but they might be useful in the future.
"""
import datetime
import os
import subprocess

from . import argsConfig
from . import Constants
from . import auxiliar

#! THIS ONE IS NOT FINISHED, I NEED A DIFFERENT APPROACH
# usage: -file+ | -tree{1} 
def dgubookmd():
    arguments = argsConfig.a_dgubookmd()
    time = datetime.datetime.now()
    x = str(time)

    tempdgu =  open('dgu2pdf.md','w') 
    tempdgu.write(Constants.markdownbook)
    tempdgu.write(f"<sup>Processed and generated on {x[:10]}</sup>.\n\n\n")

    cwd = os.getcwd()

    if arguments.file:            
        for elem in arguments.file:
            if elem.endswith('.dgu'):
                if os.path.dirname(elem)!='':
                    os.chdir(os.path.dirname(os.path.abspath(elem)))
                temp = open(os.path.basename(elem),'r').read()
                auxiliar.heading2markdown(temp,tempdgu)
                os.chdir(cwd)
                subprocess.run(['pandoc', 'dgu2pdf.md', '-o', 'dgu2pdf.pdf']) # maybe have a personalized name
                

            else:
                raise Exception(elem + " is not a dgu file")
                
    if arguments.tree:
        
        for (dirpath,_,filenames) in os.walk(cwd):
            for filename in filenames:
              if filename.endswith('.dgu'):
                temp = open(dirpath+'/'+filename,'r').read()
                auxiliar.heading2markdown(temp,tempdgu)
                os.chdir(cwd)
                subprocess.run(['pandoc', 'dgu2pdf.md', '-o', 'dgu2pdf.pdf']) # maybe have a personalized name
    
    tempdgu.close()


#? needs to be checked
# usage : --f+
def genNote():
    arguments = argsConfig.a_notes()
    if arguments.file:            
        for elem in arguments.file:
                if os.path.dirname(elem)!='':
                    filename = os.path.basename(elem)
                    name = re.split("\.",filename)[0]
                    format = re.split("\.",filename)[1]
                    identifier = re.split("-",name)[0]
                    os.chdir(os.path.dirname(os.path.abspath(elem)))
                    if (identifier +'.anbnote') in os.listdir(os.getcwd()):
                        print("Note already exists.")
                    else:
                        if format == 'tex':
                            args = ['pandoc','-s', elem, '-o', name + '.md']
                            subprocess.check_call(args)
                            fo = open(f'{name}.md').read()
                            headers = re.search(r"(?<=\-\-\-)(.+|\n)+?(?=\-\-\-)",fo).group()
                            adgu = yaml.full_load(headers)
                            subprocess.check_call(['rm',f"{name}.md"])
                            notename = "note" + '-' + re.split("-",name)[1] 
                            body = skeletons.note(notename,adgu.get('title',' '),adgu.get('author',' '),adgu.get('date',' '))
                            foNote = open(f"{identifier}.anbnote",'w')
                            foNote.write(body)
                            foNote.close()
                        # more formats to be added



# this was from dgu book tree

        # visited = set()
        # for dirpath, _, filenames in os.walk(cwd, followlinks=True):
        #     realpath = os.path.realpath(dirpath)
        #     if realpath in visited or os.path.basename(dirpath) == '.anbtk':
        #         continue
        #     visited.add(realpath)
        #     for filename in filenames:

        #         if filename.endswith('.dgu'):
        #             elem_path = os.path.join(dirpath, filename)
        #             if auxiliar.isDguImage(elem_path):
        #                 adgu = auxiliar.parseAbstractDgu(elem_path)
        #                 adgu['path'] = os.path.relpath(auxiliar.parseAbstractDgu(elem_path)['path'], os.getcwd())
        #                 imgs.append(adgu)
        #             else:
        #                 with open(elem_path) as elem_file:
        #                     temp = elem_file.read()
        #                     if aux:= re.split('---',temp):
        #                         (_,cabecalho,corpo) = aux
        #                         meta = yaml.safe_load(cabecalho) 
        #                         meta['corpo'] = corpo
        #                         if auxiliar.getDate(meta) is not None:
        #                             cronology.append(auxiliar.getDate(meta))
        #                             if int((old := auxiliar.getDate(meta)['date'])) < int(dates['oldest']):
        #                                 dates['oldest'] = old 
        #                         if not "title" in meta.keys() or meta['title'] =='':
        #                             meta['title'] = meta['id']
        #                         docs.append(meta)
