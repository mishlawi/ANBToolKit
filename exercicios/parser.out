Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> FSGram
Rule 1     FSGram -> Prods PYTHON IGNORED
Rule 2     Prods -> Prod Prods
Rule 3     Prods -> Prod
Rule 4     Prod -> ID PP IDS PF
Rule 5     Prod -> ID PP REGEX
Rule 6     IDS -> IDS VIR ID
Rule 7     IDS -> ID
Rule 8     IDS -> IDm
Rule 9     IDS -> IDv
Rule 10    IDS -> IDo

Terminals, with rules where they appear

ID                   : 4 5 6 7
IDm                  : 8
IDo                  : 10
IDv                  : 9
IGNORED              : 1
PF                   : 4
PP                   : 4 5
PYTHON               : 1
REGEX                : 5
VIR                  : 6
error                : 

Nonterminals, with rules where they appear

FSGram               : 0
IDS                  : 4 6
Prod                 : 2 3
Prods                : 1 2

Parsing method: LALR

state 0

    (0) S' -> . FSGram
    (1) FSGram -> . Prods PYTHON IGNORED
    (2) Prods -> . Prod Prods
    (3) Prods -> . Prod
    (4) Prod -> . ID PP IDS PF
    (5) Prod -> . ID PP REGEX

    ID              shift and go to state 4

    FSGram                         shift and go to state 1
    Prods                          shift and go to state 2
    Prod                           shift and go to state 3

state 1

    (0) S' -> FSGram .



state 2

    (1) FSGram -> Prods . PYTHON IGNORED

    PYTHON          shift and go to state 5


state 3

    (2) Prods -> Prod . Prods
    (3) Prods -> Prod .
    (2) Prods -> . Prod Prods
    (3) Prods -> . Prod
    (4) Prod -> . ID PP IDS PF
    (5) Prod -> . ID PP REGEX

    PYTHON          reduce using rule 3 (Prods -> Prod .)
    ID              shift and go to state 4

    Prod                           shift and go to state 3
    Prods                          shift and go to state 6

state 4

    (4) Prod -> ID . PP IDS PF
    (5) Prod -> ID . PP REGEX

    PP              shift and go to state 7


state 5

    (1) FSGram -> Prods PYTHON . IGNORED

    IGNORED         shift and go to state 8


state 6

    (2) Prods -> Prod Prods .

    PYTHON          reduce using rule 2 (Prods -> Prod Prods .)


state 7

    (4) Prod -> ID PP . IDS PF
    (5) Prod -> ID PP . REGEX
    (6) IDS -> . IDS VIR ID
    (7) IDS -> . ID
    (8) IDS -> . IDm
    (9) IDS -> . IDv
    (10) IDS -> . IDo

    REGEX           shift and go to state 11
    ID              shift and go to state 9
    IDm             shift and go to state 12
    IDv             shift and go to state 13
    IDo             shift and go to state 14

    IDS                            shift and go to state 10

state 8

    (1) FSGram -> Prods PYTHON IGNORED .

    $end            reduce using rule 1 (FSGram -> Prods PYTHON IGNORED .)


state 9

    (7) IDS -> ID .

    PF              reduce using rule 7 (IDS -> ID .)
    VIR             reduce using rule 7 (IDS -> ID .)


state 10

    (4) Prod -> ID PP IDS . PF
    (6) IDS -> IDS . VIR ID

    PF              shift and go to state 15
    VIR             shift and go to state 16


state 11

    (5) Prod -> ID PP REGEX .

    ID              reduce using rule 5 (Prod -> ID PP REGEX .)
    PYTHON          reduce using rule 5 (Prod -> ID PP REGEX .)


state 12

    (8) IDS -> IDm .

    PF              reduce using rule 8 (IDS -> IDm .)
    VIR             reduce using rule 8 (IDS -> IDm .)


state 13

    (9) IDS -> IDv .

    PF              reduce using rule 9 (IDS -> IDv .)
    VIR             reduce using rule 9 (IDS -> IDv .)


state 14

    (10) IDS -> IDo .

    PF              reduce using rule 10 (IDS -> IDo .)
    VIR             reduce using rule 10 (IDS -> IDo .)


state 15

    (4) Prod -> ID PP IDS PF .

    ID              reduce using rule 4 (Prod -> ID PP IDS PF .)
    PYTHON          reduce using rule 4 (Prod -> ID PP IDS PF .)


state 16

    (6) IDS -> IDS VIR . ID

    ID              shift and go to state 17


state 17

    (6) IDS -> IDS VIR ID .

    PF              reduce using rule 6 (IDS -> IDS VIR ID .)
    VIR             reduce using rule 6 (IDS -> IDS VIR ID .)

